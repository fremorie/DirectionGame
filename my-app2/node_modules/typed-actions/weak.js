'use strict';

var _defineProperty = require('babel-runtime/core-js/object/define-property');

var _defineProperty2 = _interopRequireDefault(_defineProperty);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _types = require('./types');

(0, _keys2.default)(_types).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  (0, _defineProperty2.default)(exports, key, {
    enumerable: true,
    get: function get() {
      return _types[key];
    }
  });
});

var _actions = require('./actions');

(0, _keys2.default)(_actions).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  (0, _defineProperty2.default)(exports, key, {
    enumerable: true,
    get: function get() {
      return _actions[key];
    }
  });
});
exports.handleActions = handleActions;

var _handleActions = require('redux-actions/lib/handleActions');

var _handleActions2 = _interopRequireDefault(_handleActions);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * There is an issue with imports ordering.
 *
 * When you export types A and B (that uses A), if you'll import type B before the A,
 * there will be some strange issues in some cases.
 *
 * This way we 'bound' the type declared in file to force flow use the correct type.
 *
 * TODO: (@lttb) need to open a type issue with a simple example.
 */


/* eslint-disable no-redeclare */
function handleActions(handlers) {
  var defaultState = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  return (0, _handleActions2.default)(handlers, defaultState);
}
/* eslint-enable no-redeclare */