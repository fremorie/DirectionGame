{"ast":null,"code":"export var getRandomInt = function getRandomInt(max) {\n  return Math.floor(Math.random() * Math.floor(max));\n};\nvar DIRECTION = {\n  UP: 'up',\n  DOWN: 'down',\n  LEFT: 'left',\n  RIGHT: ''\n};\nexport var generateFormation = function generateFormation(_ref) {\n  var nRows = _ref.nRows,\n      maxItemsPerRow = _ref.maxItemsPerRow;\n  var formation = [];\n  var generalDirectionIndex = getRandomInt(4);\n  var generalDirection = DIRECTION[Object.keys(DIRECTION)[generalDirectionIndex]];\n  var availableDirections = Object.keys(DIRECTION).filter(function (direction) {\n    return direction !== generalDirection;\n  });\n  var targetDirectionIndex = getRandomInt(availableDirections.length - 1);\n  var targetDirection = DIRECTION[availableDirections[targetDirectionIndex]];\n  var centralRow = Math.floor(nRows / 2);\n  console.log({\n    centralRow: centralRow,\n    targetDirection: targetDirection\n  });\n\n  for (var i = 0; i < nRows; i++) {\n    var itemsInRow = Math.floor(getRandomInt(maxItemsPerRow) / 2) * 2 + 1;\n    var row = new Array(itemsInRow).fill(generalDirection);\n\n    if (i === centralRow) {\n      var centralItemIndex = Math.floor(itemsInRow / 2);\n      console.log({\n        centralItemIndex: centralItemIndex,\n        centralRow: centralRow\n      });\n      row.splice(centralItemIndex, 1, targetDirection);\n    }\n\n    formation.push(row);\n  }\n\n  return formation;\n};","map":{"version":3,"sources":["/Users/dariaborisyak/dev/personal/DirectionGame/my-app2/src/utils/index.js"],"names":["getRandomInt","max","Math","floor","random","DIRECTION","UP","DOWN","LEFT","RIGHT","generateFormation","nRows","maxItemsPerRow","formation","generalDirectionIndex","generalDirection","Object","keys","availableDirections","filter","direction","targetDirectionIndex","length","targetDirection","centralRow","console","log","i","itemsInRow","row","Array","fill","centralItemIndex","splice","push"],"mappings":"AAEA,OAAO,IAAMA,YAAY,GAAG,SAAfA,YAAe,CAAAC,GAAG;AAAA,SAAIC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBF,IAAI,CAACC,KAAL,CAAWF,GAAX,CAA3B,CAAJ;AAAA,CAAxB;AAEP,IAAMI,SAAS,GAAG;AACdC,EAAAA,EAAE,EAAE,IADU;AAEdC,EAAAA,IAAI,EAAE,MAFQ;AAGdC,EAAAA,IAAI,EAAE,MAHQ;AAIdC,EAAAA,KAAK,EAAE;AAJO,CAAlB;AAOA,OAAO,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,OAA6B;AAAA,MAA3BC,KAA2B,QAA3BA,KAA2B;AAAA,MAApBC,cAAoB,QAApBA,cAAoB;AAC1D,MAAMC,SAAS,GAAG,EAAlB;AAEA,MAAMC,qBAAqB,GAAGd,YAAY,CAAC,CAAD,CAA1C;AACA,MAAMe,gBAAgB,GAAGV,SAAS,CAACW,MAAM,CAACC,IAAP,CAAYZ,SAAZ,EAAuBS,qBAAvB,CAAD,CAAlC;AAEA,MAAMI,mBAAmB,GAAGF,MAAM,CAACC,IAAP,CAAYZ,SAAZ,EAAuBc,MAAvB,CAA8B,UAAAC,SAAS;AAAA,WAAIA,SAAS,KAAKL,gBAAlB;AAAA,GAAvC,CAA5B;AACA,MAAMM,oBAAoB,GAAGrB,YAAY,CAACkB,mBAAmB,CAACI,MAApB,GAA6B,CAA9B,CAAzC;AAEA,MAAMC,eAAe,GAAGlB,SAAS,CAACa,mBAAmB,CAACG,oBAAD,CAApB,CAAjC;AAEA,MAAMG,UAAU,GAAGtB,IAAI,CAACC,KAAL,CAAWQ,KAAK,GAAG,CAAnB,CAAnB;AACAc,EAAAA,OAAO,CAACC,GAAR,CAAY;AAACF,IAAAA,UAAU,EAAVA,UAAD;AAAaD,IAAAA,eAAe,EAAfA;AAAb,GAAZ;;AAEA,OAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGhB,KAApB,EAA2BgB,CAAC,EAA5B,EAAgC;AAC5B,QAAMC,UAAU,GAAG1B,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACY,cAAD,CAAZ,GAA+B,CAA1C,IAA+C,CAA/C,GAAmD,CAAtE;AACA,QAAMiB,GAAG,GAAG,IAAIC,KAAJ,CAAUF,UAAV,EAAsBG,IAAtB,CAA2BhB,gBAA3B,CAAZ;;AAEA,QAAIY,CAAC,KAAKH,UAAV,EAAsB;AAClB,UAAMQ,gBAAgB,GAAG9B,IAAI,CAACC,KAAL,CAAWyB,UAAU,GAAG,CAAxB,CAAzB;AACAH,MAAAA,OAAO,CAACC,GAAR,CAAY;AAACM,QAAAA,gBAAgB,EAAhBA,gBAAD;AAAmBR,QAAAA,UAAU,EAAVA;AAAnB,OAAZ;AACAK,MAAAA,GAAG,CAACI,MAAJ,CAAWD,gBAAX,EAA6B,CAA7B,EAAgCT,eAAhC;AACH;;AAEDV,IAAAA,SAAS,CAACqB,IAAV,CAAeL,GAAf;AACH;;AAED,SAAOhB,SAAP;AACH,CA5BM","sourcesContent":["// @flow\n\nexport const getRandomInt = max => Math.floor(Math.random() * Math.floor(max));\n\nconst DIRECTION = {\n    UP: 'up',\n    DOWN: 'down',\n    LEFT: 'left',\n    RIGHT: '',\n};\n\nexport const generateFormation = ({nRows, maxItemsPerRow}) => {\n    const formation = [];\n\n    const generalDirectionIndex = getRandomInt(4);\n    const generalDirection = DIRECTION[Object.keys(DIRECTION)[generalDirectionIndex]];\n\n    const availableDirections = Object.keys(DIRECTION).filter(direction => direction !== generalDirection);\n    const targetDirectionIndex = getRandomInt(availableDirections.length - 1);\n\n    const targetDirection = DIRECTION[availableDirections[targetDirectionIndex]];\n\n    const centralRow = Math.floor(nRows / 2);\n    console.log({centralRow, targetDirection});\n\n    for (let i = 0; i < nRows; i++) {\n        const itemsInRow = Math.floor(getRandomInt(maxItemsPerRow) / 2) * 2 + 1;\n        const row = new Array(itemsInRow).fill(generalDirection);\n\n        if (i === centralRow) {\n            const centralItemIndex = Math.floor(itemsInRow / 2);\n            console.log({centralItemIndex, centralRow});\n            row.splice(centralItemIndex, 1, targetDirection);\n        }\n\n        formation.push(row);\n    }\n\n    return formation;\n};\n"]},"metadata":{},"sourceType":"module"}